/*
 * Copyright (c) 2017-Present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */
import * as tslib_1 from "tslib";
import { NgModule, Inject, Optional } from '@angular/core';
import { Router } from '@angular/router';
import { Location } from '@angular/common';
import { OktaCallbackComponent } from './components/callback.component';
import { OktaAuthGuard } from './okta.guard';
import { OktaAuthStateService } from './services/auth-state.service';
import { OktaHasAnyGroupDirective } from './has-any-group.directive';
import { OKTA_CONFIG } from './models/okta.config';
import { OktaAuth, AuthSdkError, toRelativeUrl } from '@okta/okta-auth-js';
import packageInfo from './packageInfo';
var OktaAuthModule = /** @class */ (function () {
    function OktaAuthModule(config, location, router) {
        var _this = this;
        var oktaAuth = config.oktaAuth;
        if (!oktaAuth._oktaUserAgent) {
            throw new AuthSdkError('_oktaUserAgent is not available on auth SDK instance. Please use okta-auth-js@^5.3.1 or higher.');
        }
        // Auth-js version compatibility runtime check
        var oktaAuthVersion = oktaAuth._oktaUserAgent.getVersion();
        var majorVersion = +oktaAuthVersion.split('.')[0];
        if (packageInfo.authJSMajorVersion !== majorVersion) {
            throw new AuthSdkError("Passed in oktaAuth is not compatible with the SDK, okta-auth-js version " + packageInfo.authJSMajorVersion + ".x is the current supported version.");
        }
        // Add Okta UA
        oktaAuth._oktaUserAgent.addEnvironment(packageInfo.name + "/" + packageInfo.version);
        // Provide a default implementation of `restoreOriginalUri`
        if (!oktaAuth.options.restoreOriginalUri && router && location) {
            oktaAuth.options.restoreOriginalUri = function (_, originalUri) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                var baseUrl, routePath;
                return tslib_1.__generator(this, function (_a) {
                    baseUrl = window.location.origin + location.prepareExternalUrl('');
                    routePath = toRelativeUrl(originalUri || '/', baseUrl);
                    router.navigateByUrl(routePath);
                    return [2 /*return*/];
                });
            }); };
        }
        // Start services
        oktaAuth.start();
    }
    OktaAuthModule = tslib_1.__decorate([
        NgModule({
            declarations: [
                OktaCallbackComponent,
                OktaHasAnyGroupDirective,
            ],
            exports: [
                OktaCallbackComponent,
                OktaHasAnyGroupDirective,
            ],
            providers: [
                OktaAuthGuard,
                OktaAuthStateService,
                {
                    provide: OktaAuth,
                    useFactory: function (config) {
                        return config.oktaAuth;
                    },
                    deps: [OKTA_CONFIG]
                },
            ]
        }),
        tslib_1.__param(0, Inject(OKTA_CONFIG)),
        tslib_1.__param(1, Optional()),
        tslib_1.__param(2, Optional()),
        tslib_1.__metadata("design:paramtypes", [Object, Location,
            Router])
    ], OktaAuthModule);
    return OktaAuthModule;
}());
export { OktaAuthModule };
//# sourceMappingURL=okta.module.js.map