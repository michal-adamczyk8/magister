{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let TakerService = /*#__PURE__*/(() => {\n  class TakerService {\n    constructor(httpClient) {\n      this.httpClient = httpClient;\n      this.baseUrl = environment.apiUrl;\n    }\n\n    getAllTakers(page, size) {\n      let params = new HttpParams();\n      params = params.append(\"page\", page.toString());\n      params = params.append(\"size\", size.toString());\n      return this.httpClient.get(`${this.baseUrl}/taker/all`, {\n        params: params\n      });\n    }\n\n    getAllTakersForShelter(shelterId, page, size) {\n      return this.httpClient.get(`${this.baseUrl}/shelter/takers/${shelterId}/${page}/${size}`);\n    }\n\n    getSingleTaker(takerId) {\n      const httpUrl = this.baseUrl + '/taker/details/' + takerId;\n      return this.httpClient.get(httpUrl);\n    }\n\n    getAllPetsForTaker(shelterId, page, size) {\n      return this.httpClient.get(`${this.baseUrl}/taker/pets/${shelterId}/${page}/${size}`);\n    }\n\n    saveEditedTaker(taker) {\n      const headers = {\n        'content-type': 'application/json'\n      };\n      const body = JSON.stringify(taker);\n      return this.httpClient.put(`${this.baseUrl}/taker/edit`, body, {\n        headers\n      }).subscribe();\n    }\n\n    getUnassignedTakersForPet(shelterId, petId) {\n      return this.httpClient.get(`${this.baseUrl}/taker/available/${shelterId}/${petId}`);\n    }\n\n    addTaker(newTaker) {\n      const headers = {\n        'content-type': 'application/json'\n      };\n      const body = JSON.stringify(newTaker);\n      return this.httpClient.post(`${this.baseUrl}'/taker`, body, {\n        headers\n      }).subscribe();\n    }\n\n    deleteTaker(taker) {\n      const httpUrl = this.baseUrl + '/taker/' + taker.id;\n      return this.httpClient.delete(httpUrl).subscribe();\n    }\n\n  }\n\n  TakerService.ɵfac = function TakerService_Factory(t) {\n    return new (t || TakerService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  TakerService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TakerService,\n    factory: TakerService.ɵfac,\n    providedIn: 'root'\n  });\n  return TakerService;\n})();","map":null,"metadata":{},"sourceType":"module"}