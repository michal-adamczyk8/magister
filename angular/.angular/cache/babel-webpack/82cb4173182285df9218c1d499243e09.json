{"ast":null,"code":"/*!\n * Copyright (c) 2017-Present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { __awaiter, __decorate, __param, __metadata } from 'tslib';\nimport { InjectionToken, Component, Inject, Optional, Injector, Injectable, Input, Directive, TemplateRef, ViewContainerRef, NgModule } from '@angular/core';\nimport { Router, NavigationStart } from '@angular/router';\nimport { Location } from '@angular/common';\nimport { OktaAuth, AuthSdkError, toRelativeUrl } from '@okta/okta-auth-js';\nimport { filter, mergeMap } from 'rxjs/operators';\nimport { BehaviorSubject } from 'rxjs';\n/*\n * Copyright (c) 2017-Present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@okta/okta-auth-js';\nimport * as ɵngcc2 from '@angular/common';\nimport * as ɵngcc3 from '@angular/router';\nconst OKTA_CONFIG = new InjectionToken('okta.config.angular');\n/*\n * Copyright (c) 2017-Present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nlet OktaCallbackComponent = /*#__PURE__*/(() => {\n  let OktaCallbackComponent = class OktaCallbackComponent {\n    constructor(config, oktaAuth, injector) {\n      this.config = config;\n      this.oktaAuth = oktaAuth;\n      this.injector = injector;\n    }\n\n    ngOnInit() {\n      return __awaiter(this, void 0, void 0, function* () {\n        try {\n          // Parse code or tokens from the URL, store tokens in the TokenManager, and redirect back to the originalUri\n          yield this.oktaAuth.handleLoginRedirect();\n        } catch (e) {\n          // Callback from social IDP. Show custom login page to continue.\n          if (this.oktaAuth.isInteractionRequiredError(e) && this.injector) {\n            const {\n              onAuthResume,\n              onAuthRequired\n            } = this.config;\n            const callbackFn = onAuthResume || onAuthRequired;\n\n            if (callbackFn) {\n              callbackFn(this.oktaAuth, this.injector);\n              return;\n            }\n          }\n\n          this.error = e.toString();\n        }\n      });\n    }\n\n  };\n\n  OktaCallbackComponent.ɵfac = function OktaCallbackComponent_Factory(t) {\n    return new (t || OktaCallbackComponent)(ɵngcc0.ɵɵdirectiveInject(OKTA_CONFIG), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.OktaAuth), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector, 8));\n  };\n\n  OktaCallbackComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: OktaCallbackComponent,\n    selectors: [[\"ng-component\"]],\n    decls: 2,\n    vars: 1,\n    template: function OktaCallbackComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\");\n        ɵngcc0.ɵɵtext(1);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵtextInterpolate(ctx.error);\n      }\n    },\n    encapsulation: 2\n  });\n  OktaCallbackComponent = __decorate([__param(0, Inject(OKTA_CONFIG)), __param(2, Optional()), __metadata(\"design:paramtypes\", [Object, OktaAuth, Injector])], OktaCallbackComponent);\n  /*\n   * Copyright (c) 2017-Present, Okta, Inc. and/or its affiliates. All rights reserved.\n   * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n   *\n   * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n   * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   *\n   * See the License for the specific language governing permissions and limitations under the License.\n   */\n\n  return OktaCallbackComponent;\n})();\nlet OktaAuthGuard = /*#__PURE__*/(() => {\n  let OktaAuthGuard = class OktaAuthGuard {\n    constructor(config, oktaAuth, injector) {\n      this.config = config;\n      this.oktaAuth = oktaAuth;\n      this.injector = injector;\n\n      this.updateAuthStateListener = authState => {\n        if (!authState.isAuthenticated) {\n          this.handleLogin(this.state.url);\n        }\n      };\n\n      this.onAuthRequired = this.config.onAuthRequired; // Unsubscribe updateAuthStateListener when route change\n\n      const router = injector.get(Router);\n      router.events.pipe(filter(e => e instanceof NavigationStart && this.state && this.state.url !== e.url)).subscribe(() => {\n        this.oktaAuth.authStateManager.unsubscribe(this.updateAuthStateListener);\n      });\n    }\n\n    canLoad(route, segments) {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.onAuthRequired = route.data && route.data.onAuthRequired || this.onAuthRequired;\n        const isAuthenticated = yield this.oktaAuth.isAuthenticated();\n\n        if (isAuthenticated) {\n          return true;\n        }\n\n        const originalUri = segments[0].path;\n        yield this.handleLogin(originalUri);\n        return false;\n      });\n    }\n    /**\n     * Gateway for protected route. Returns true if there is a valid accessToken,\n     * otherwise it will cache the route and start the login flow.\n     * @param route\n     * @param state\n     */\n\n\n    canActivate(route, state) {\n      return __awaiter(this, void 0, void 0, function* () {\n        // Track states for current route\n        this.state = state;\n        this.onAuthRequired = route.data && route.data.onAuthRequired || this.onAuthRequired; // Protect the route after accessing\n\n        this.oktaAuth.authStateManager.subscribe(this.updateAuthStateListener);\n        const isAuthenticated = yield this.oktaAuth.isAuthenticated();\n\n        if (isAuthenticated) {\n          return true;\n        }\n\n        yield this.handleLogin(state.url);\n        return false;\n      });\n    }\n\n    canActivateChild(route, state) {\n      return __awaiter(this, void 0, void 0, function* () {\n        return this.canActivate(route, state);\n      });\n    }\n\n    handleLogin(originalUri) {\n      return __awaiter(this, void 0, void 0, function* () {\n        // Store the current path\n        this.oktaAuth.setOriginalUri(originalUri);\n\n        if (this.onAuthRequired) {\n          this.onAuthRequired(this.oktaAuth, this.injector);\n        } else {\n          this.oktaAuth.signInWithRedirect();\n        }\n      });\n    }\n\n  };\n\n  OktaAuthGuard.ɵfac = function OktaAuthGuard_Factory(t) {\n    return new (t || OktaAuthGuard)(ɵngcc0.ɵɵinject(OKTA_CONFIG), ɵngcc0.ɵɵinject(ɵngcc1.OktaAuth), ɵngcc0.ɵɵinject(ɵngcc0.Injector));\n  };\n\n  OktaAuthGuard.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: OktaAuthGuard,\n    factory: function (t) {\n      return OktaAuthGuard.ɵfac(t);\n    }\n  });\n  OktaAuthGuard = __decorate([__param(0, Inject(OKTA_CONFIG)), __metadata(\"design:paramtypes\", [Object, OktaAuth, Injector])], OktaAuthGuard);\n  return OktaAuthGuard;\n})();\nconst defaultAuthState = {\n  isAuthenticated: false\n};\nlet OktaAuthStateService = /*#__PURE__*/(() => {\n  let OktaAuthStateService = class OktaAuthStateService {\n    constructor(oktaAuth) {\n      this.oktaAuth = oktaAuth;\n      this._authState = new BehaviorSubject(defaultAuthState); // only expose readonly property\n\n      this.authState$ = this._authState.asObservable();\n      this.updateAuthState = this.updateAuthState.bind(this); // set initial authState\n\n      const initialAuthState = this.oktaAuth.authStateManager.getAuthState() || defaultAuthState;\n\n      this._authState.next(initialAuthState); // subscribe to future changes\n\n\n      this.oktaAuth.authStateManager.subscribe(this.updateAuthState);\n    }\n\n    ngOnDestroy() {\n      this.oktaAuth.authStateManager.unsubscribe(this.updateAuthState);\n    } // Observes as true when any group input can match groups from user claims \n\n\n    hasAnyGroups(groups) {\n      return this.authState$.pipe(mergeMap(({\n        isAuthenticated,\n        idToken\n      }) => __awaiter(this, void 0, void 0, function* () {\n        // return false when not authenticated or openid is not in scopes\n        if (!isAuthenticated || !idToken) {\n          return false;\n        } // transform inputs to consistent object format\n\n\n        if (typeof groups === 'string') {\n          groups = {\n            groups: [groups]\n          };\n        }\n\n        if (Array.isArray(groups)) {\n          groups = {\n            groups\n          };\n        }\n\n        const key = Object.keys(groups)[0];\n        const value = groups[key]; // groups or custom claims is available in idToken\n\n        if (idToken.claims[key]) {\n          return value.some(authority => idToken.claims[key].includes(authority));\n        } // try /userinfo endpoint when thin idToken (no groups claim) is returned\n        // https://developer.okta.com/docs/concepts/api-access-management/#tokens-and-scopes\n\n\n        const userInfo = yield this.oktaAuth.getUser();\n\n        if (!userInfo[key]) {\n          return false;\n        }\n\n        return value.some(authority => userInfo[key].includes(authority));\n      })));\n    }\n\n    updateAuthState(authState) {\n      this._authState.next(authState);\n    }\n\n  };\n\n  OktaAuthStateService.ɵfac = function OktaAuthStateService_Factory(t) {\n    return new (t || OktaAuthStateService)(ɵngcc0.ɵɵinject(ɵngcc1.OktaAuth));\n  };\n\n  OktaAuthStateService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: OktaAuthStateService,\n    factory: function (t) {\n      return OktaAuthStateService.ɵfac(t);\n    }\n  });\n  OktaAuthStateService = __decorate([__metadata(\"design:paramtypes\", [OktaAuth])], OktaAuthStateService);\n  return OktaAuthStateService;\n})();\nlet OktaHasAnyGroupDirective = /*#__PURE__*/(() => {\n  let OktaHasAnyGroupDirective = class OktaHasAnyGroupDirective {\n    constructor( // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    templateRef, viewContainer, authStateService) {\n      this.templateRef = templateRef;\n      this.viewContainer = viewContainer;\n      this.authStateService = authStateService;\n    }\n\n    set oktaHasAnyGroup(groups) {\n      this.authStateService.hasAnyGroups(groups).subscribe(isAuthorized => {\n        // don't update UI if no state change\n        if (isAuthorized === this.previousIsAuthorized) {\n          return;\n        }\n\n        this.previousIsAuthorized = isAuthorized;\n        this.viewContainer.clear();\n\n        if (isAuthorized) {\n          this.viewContainer.createEmbeddedView(this.templateRef);\n        }\n      });\n    }\n\n  };\n\n  OktaHasAnyGroupDirective.ɵfac = function OktaHasAnyGroupDirective_Factory(t) {\n    return new (t || OktaHasAnyGroupDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(OktaAuthStateService));\n  };\n\n  OktaHasAnyGroupDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: OktaHasAnyGroupDirective,\n    selectors: [[\"\", \"oktaHasAnyGroup\", \"\"]],\n    inputs: {\n      oktaHasAnyGroup: \"oktaHasAnyGroup\"\n    }\n  });\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], OktaHasAnyGroupDirective.prototype, \"oktaHasAnyGroup\", null);\n\n  OktaHasAnyGroupDirective = __decorate([__metadata(\"design:paramtypes\", [TemplateRef, ViewContainerRef, OktaAuthStateService])], OktaHasAnyGroupDirective);\n  return OktaHasAnyGroupDirective;\n})();\nvar packageInfo = {\n  'name': '@okta/okta-angular',\n  'version': '4.1.1',\n  'authJSMajorVersion': 5\n};\n/*\n * Copyright (c) 2017-Present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nlet OktaAuthModule = /*#__PURE__*/(() => {\n  let OktaAuthModule = class OktaAuthModule {\n    constructor(config, location, router) {\n      const {\n        oktaAuth\n      } = config;\n\n      if (!oktaAuth._oktaUserAgent) {\n        throw new AuthSdkError('_oktaUserAgent is not available on auth SDK instance. Please use okta-auth-js@^5.3.1 or higher.');\n      } // Auth-js version compatibility runtime check\n\n\n      const oktaAuthVersion = oktaAuth._oktaUserAgent.getVersion();\n\n      const majorVersion = +oktaAuthVersion.split('.')[0];\n\n      if (packageInfo.authJSMajorVersion !== majorVersion) {\n        throw new AuthSdkError(`Passed in oktaAuth is not compatible with the SDK, okta-auth-js version ${packageInfo.authJSMajorVersion}.x is the current supported version.`);\n      } // Add Okta UA\n\n\n      oktaAuth._oktaUserAgent.addEnvironment(`${packageInfo.name}/${packageInfo.version}`); // Provide a default implementation of `restoreOriginalUri`\n\n\n      if (!oktaAuth.options.restoreOriginalUri && router && location) {\n        oktaAuth.options.restoreOriginalUri = (_, originalUri) => __awaiter(this, void 0, void 0, function* () {\n          const baseUrl = window.location.origin + location.prepareExternalUrl('');\n          const routePath = toRelativeUrl(originalUri || '/', baseUrl);\n          router.navigateByUrl(routePath);\n        });\n      } // Start services\n\n\n      oktaAuth.start();\n    }\n\n  };\n\n  OktaAuthModule.ɵfac = function OktaAuthModule_Factory(t) {\n    return new (t || OktaAuthModule)(ɵngcc0.ɵɵinject(OKTA_CONFIG), ɵngcc0.ɵɵinject(ɵngcc2.Location, 8), ɵngcc0.ɵɵinject(ɵngcc3.Router, 8));\n  };\n\n  OktaAuthModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: OktaAuthModule\n  });\n  OktaAuthModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    providers: [OktaAuthGuard, OktaAuthStateService, {\n      provide: OktaAuth,\n\n      useFactory(config) {\n        return config.oktaAuth;\n      },\n\n      deps: [OKTA_CONFIG]\n    }]\n  });\n  OktaAuthModule = __decorate([__param(0, Inject(OKTA_CONFIG)), __param(1, Optional()), __param(2, Optional()), __metadata(\"design:paramtypes\", [Object, Location, Router])], OktaAuthModule);\n  return OktaAuthModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(OktaAuthModule, {\n    declarations: [OktaCallbackComponent, OktaHasAnyGroupDirective],\n    exports: [OktaCallbackComponent, OktaHasAnyGroupDirective]\n  });\n})();\n\nexport { OKTA_CONFIG, OktaAuthGuard, OktaAuthModule, OktaAuthStateService, OktaCallbackComponent, OktaHasAnyGroupDirective as ɵa }; //# sourceMappingURL=okta-angular.js.map","map":null,"metadata":{},"sourceType":"module"}