{"ast":null,"code":"import { environment } from '../../environments/environment';\nimport { HttpClient } from '@angular/common/http';\nimport { JwtHelperService } from \"@auth0/angular-jwt\";\nimport { RoleEnum } from '../enum/role.enum';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthenticationService = /*#__PURE__*/(() => {\n  class AuthenticationService {\n    constructor(http) {\n      this.http = http;\n      this.baseUrl = environment.apiUrl;\n      this.jwtHelperService = new JwtHelperService();\n    }\n\n    login(user) {\n      return this.http.post(`${this.baseUrl}/user/login`, user, {\n        observe: 'response'\n      });\n    }\n\n    register(user) {\n      return this.http.post(`${this.baseUrl}/user/register`, user);\n    }\n\n    resetPassword(user) {\n      return this.http.patch(`${this.baseUrl}/user/reset-password`, user);\n    }\n\n    logOut() {\n      this.token = null;\n      this.loggedInUsername = null;\n      localStorage.removeItem('user');\n      localStorage.removeItem('token');\n      localStorage.removeItem('users');\n    }\n\n    saveToken(token) {\n      this.token = token;\n      localStorage.setItem('token', token);\n    }\n\n    addUserToLocalCache(user) {\n      localStorage.setItem('user', JSON.stringify(user));\n    }\n\n    getUserFromLocalCache() {\n      return JSON.parse(localStorage.getItem('user'));\n    }\n\n    loadToken() {\n      this.token = localStorage.getItem('token');\n    }\n\n    getToken() {\n      return this.token;\n    }\n\n    isLoggedIn() {\n      this.loadToken();\n\n      if (this.token != null && this.token !== '') {\n        const usernameFromToken = this.jwtHelperService.decodeToken(this.token).sub;\n\n        if (usernameFromToken != null || '') {\n          if (!this.jwtHelperService.isTokenExpired(this.token)) {\n            this.loggedInUsername = this.jwtHelperService.decodeToken(this.token).sub;\n            return true;\n          }\n        }\n      } else {\n        this.logOut();\n        return false;\n      }\n    }\n\n    isAdmin(user) {\n      return user.role === RoleEnum.SUPER_ADMIN;\n    }\n\n    isUser(user) {\n      return user.role === RoleEnum.USER;\n    }\n\n    isManager(user) {\n      return user.role === RoleEnum.MANAGER;\n    }\n\n    isAdminOrManager(user) {\n      return this.isAdmin(user) || this.isManager(user);\n    }\n\n    isLoggedManagerOrAdmin() {\n      const user = this.getUserFromLocalCache();\n\n      if (!user) {\n        return false;\n      } else if (!this.isAdminOrManager(user)) {\n        return false;\n      }\n\n      return true;\n    }\n\n    isLoggedUserManager() {\n      const user = this.getUserFromLocalCache();\n\n      if (!user) {\n        return false;\n      } else if (!this.isAdmin(user)) {\n        return false;\n      }\n\n      return true;\n    }\n\n    getLoggedUserShelterId() {\n      const user = this.getUserFromLocalCache();\n\n      if (!user) {\n        return -1;\n      }\n\n      return user.shelterId;\n    }\n\n  }\n\n  AuthenticationService.ɵfac = function AuthenticationService_Factory(t) {\n    return new (t || AuthenticationService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  AuthenticationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthenticationService,\n    factory: AuthenticationService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthenticationService;\n})();","map":null,"metadata":{},"sourceType":"module"}