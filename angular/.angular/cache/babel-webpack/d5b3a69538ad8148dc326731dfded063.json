{"ast":null,"code":"import { environment } from '../../environments/environment';\nimport { HttpClient } from '@angular/common/http';\nimport { AddWalkRequest } from './add-walk-request';\nimport { WalkStatus } from '../enum/walk-status.enum';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let WalkService = /*#__PURE__*/(() => {\n  class WalkService {\n    constructor(httpClient) {\n      this.httpClient = httpClient;\n      this.baseUrl = environment.apiUrl;\n    }\n\n    scheduleWalk(dateTime, petId, userId) {\n      const headers = {\n        'content-type': 'application/json'\n      };\n      const req = new AddWalkRequest(dateTime, petId, userId, WalkStatus.CREATED);\n      const body = JSON.stringify(req);\n      return this.httpClient.post(`${this.baseUrl}/walk`, body, {\n        headers\n      }).subscribe();\n    }\n\n    getWalksForShelter(shelterId) {\n      return this.httpClient.get(`${this.baseUrl}/walk/shelter/${shelterId}`);\n    }\n\n    getWalksForUser(userId) {\n      return this.httpClient.get(`${this.baseUrl}/walk/user/${userId}`);\n    }\n\n    confirmWalk(walkId) {\n      return this.httpClient.patch(`${this.baseUrl}/walk/${walkId}/confirm`, null).subscribe();\n    }\n\n    cancelWalk(walkId) {\n      return this.httpClient.patch(`${this.baseUrl}/walk/${walkId}/cancel`, null).subscribe();\n    }\n\n  }\n\n  WalkService.ɵfac = function WalkService_Factory(t) {\n    return new (t || WalkService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  WalkService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: WalkService,\n    factory: WalkService.ɵfac,\n    providedIn: 'root'\n  });\n  return WalkService;\n})();","map":null,"metadata":{},"sourceType":"module"}